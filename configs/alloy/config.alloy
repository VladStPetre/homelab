/* Grafana Alloy Configuration â€“ fixed River syntax (1 attribute per line) */

// ============================
// DISCOVERY
// ============================
discovery.docker "docker" {
  host = "unix:///var/run/docker.sock"
}

// ============================
// REMOTES (unchanged endpoints)
// ============================
loki.write "echo" {
  endpoint {
    url = "https://loki.dalvv.org/loki/api/v1/push"
  }
  external_labels = {}
}

prometheus.remote_write "echo" {
  endpoint {
    url = "https://prometheus.dalvv.org/api/v1/write"
  }
}

// ============================
// SYSTEM LOGS (files)
// ============================
local.file_match "system" {
  path_targets = [{
    __address__ = "localhost",
    __path__    = "/var/log/{syslog,messages,*.log}",
    instance    = constants.hostname,
    job         = "host-logs",
  }]
}

loki.relabel "file_std" {
  forward_to = [loki.process.host_logs.receiver]

  rule {
    action       = "replace"
    target_label = "node"
    replacement  = constants.hostname
  }
  rule {
    action       = "replace"
    target_label = "job"
    replacement  = "host-logs"
  }
  rule {
    action       = "replace"
    target_label = "service_name"
    replacement  = "host-logs"
  }
}

loki.source.file "system" {
  targets    = local.file_match.system.targets
  forward_to = [loki.relabel.file_std.receiver]
}

loki.process "host_logs" {
  forward_to = [loki.write.echo.receiver]
  // Non-destructive attempt to parse JSON lines
  stage.json {
    expressions     = { level = "level", msg = "msg", t = "time" }
    drop_malformed  = false
  }
}

// ============================
// JOURNAL LOGS (both paths)
// ============================
discovery.relabel "journal_enrich" {
  targets = []

  rule {
    source_labels = ["__journal__systemd_unit"]
    target_label  = "unit"
  }
  rule {
    source_labels = ["__journal__boot_id"]
    target_label  = "boot_id"
  }
  rule {
    source_labels = ["__journal__transport"]
    target_label  = "transport"
  }
  rule {
    source_labels = ["__journal_priority_keyword"]
    target_label  = "level"
  }
  rule {
    target_label = "node"
    replacement  = constants.hostname
  }
  rule {
    target_label = "job"
    replacement  = "journald"
  }
  // NEW: unify with docker/host by providing a service_name
  rule {
    target_label = "service_name"
    replacement  = "journald"
  }
}

// /run/log/journal
loki.source.journal "journal_run" {
  path          = "/run/log/journal"
  max_age       = "24h0m0s"
  relabel_rules = discovery.relabel.journal_enrich.rules
  labels        = { component = string.format("%s-journal", constants.hostname) }
  forward_to    = [loki.write.echo.receiver]
}

// /var/log/journal (your original)
loki.source.journal "journal_var" {
  path          = "/var/log/journal"
  max_age       = "24h0m0s"
  relabel_rules = discovery.relabel.journal_enrich.rules
  labels        = { component = string.format("%s-journal", constants.hostname) }
  forward_to    = [loki.write.echo.receiver]
}

// ============================
// DOCKER LOGS (with richer labels)
// ============================
discovery.relabel "dockerlogs" {
  targets = []

  // --- Base labels we always keep ---
  rule {
    source_labels = ["__meta_docker_container_name"]
    regex         = "/(.*)"
    target_label  = "container"
  }
  rule {
    source_labels = ["__meta_docker_container_id"]
    target_label  = "container_id"
  }
  rule {
    source_labels = ["__meta_docker_image"]
    target_label  = "image"
  }
  rule {
    source_labels = ["__meta_docker_label_com_docker_stack_namespace"]
    target_label  = "stack"
  }
  rule {
    target_label = "platform"
    replacement  = "docker"
  }
  rule {
    target_label = "node"
    replacement  = constants.hostname
  }
  rule {
    target_label = "job"
    replacement  = "docker"
  }

  // --- Derive a default service_name from the container name ---
  // 1) Keep a clean copy of the container name (no leading '/')
  rule {
    source_labels = ["__meta_docker_container_name"]
    regex         = "/(.*)"
    target_label  = "__tmp_container"
  }

  // 2) Default service_name = whole container name (safe fallback)
  rule {
    source_labels = ["__tmp_container"]
    regex         = "(.+)"
    target_label  = "service_name"
    replacement   = "$1"
  }

  // 3) If it looks like a Swarm task name (stack_service.N.ID or service.N.ID), extract just the service
  //    Examples:
  //      echo_logs.1.7uf...  -> echo_logs
  //      mystack_api.3.k9a.. -> api   (drops "mystack_" prefix)
  rule {
    source_labels = ["__tmp_container"]
    regex         = "^(?:[^_]+_)?([^\\.]+)\\..+$"
    target_label  = "service_name"
    replacement   = "$1"
  }

  // 4) If Compose service label exists, prefer it
  rule {
    source_labels = ["__meta_docker_label_com_docker_compose_service"]
    regex         = "(.+)"           // only apply when present
    target_label  = "service_name"
    replacement   = "$1"
  }

  // 5) If Swarm service label exists, prefer it (highest priority)
  rule {
    source_labels = ["__meta_docker_label_com_docker_swarm_service_name"]
    regex         = "(.+)"           // only apply when present
    target_label  = "service_name"
    replacement   = "$1"
  }

  // Cleanup temp labels
  rule {
    action = "labeldrop"
    regex  = "__tmp_.*"
  }
}


loki.source.docker "docker" {
  host          = "unix:///var/run/docker.sock"
  targets       = discovery.docker.docker.targets
  relabel_rules = discovery.relabel.dockerlogs.rules
  forward_to    = [loki.process.docker_logs.receiver]
}

loki.process "docker_logs" {
  forward_to = [loki.write.echo.receiver]
  stage.json {
    expressions    = { level = "level", msg = "msg", t = "time" }
    drop_malformed = false
  }
}

// ============================
// METRICS: host (node_exporter)
// ============================
prometheus.exporter.unix "metrics" {
  disable_collectors = ["ipvs", "btrfs", "infiniband", "xfs", "zfs"]
  enable_collectors  = ["meminfo"]

  filesystem {
    fs_types_exclude     = "^(autofs|cifs|nfs|nfs4|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|tmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$"
    mount_points_exclude = "^/(dev|proc|run/credentials/.+|sys|var/lib/docker/.+|mnt|mnt/nas)($|/)"
    mount_timeout        = "5s"
  }

  netclass {
    ignored_devices = "^(veth.*|cali.*|[a-f0-9]{15})$"
  }
  netdev {
    device_exclude = "^(veth.*|cali.*|[a-f0-9]{15})$"
  }
}

discovery.relabel "metrics_targets" {
  targets = prometheus.exporter.unix.metrics.targets
  rule {
    target_label = "instance"
    replacement  = constants.hostname
  }
  rule {
    target_label = "job"
    replacement  = "node-metrics"
  }
  rule {
    target_label = "node"
    replacement  = constants.hostname
  }
}

prometheus.scrape "metrics" {
  scrape_interval = "15s"
  targets         = discovery.relabel.metrics_targets.output
  forward_to      = [prometheus.remote_write.echo.receiver]
}

// ============================
// METRICS: Docker via cAdvisor
// ============================
prometheus.exporter.cadvisor "dockermetrics" {
  docker_host      = "unix:///var/run/docker.sock"
  docker_only      = true
  disabled_metrics = ["disk", "diskIO"]  // drop FS/IO families
  storage_duration = "5m"
}

prometheus.relabel "cadvisor_labels" {
  forward_to = []

  rule {
    target_label = "instance"
    replacement  = constants.hostname
  }
  rule {
    target_label = "node"
    replacement  = constants.hostname
  }
  rule {
    target_label = "job"
    replacement  = "cadvisor"
  }
}

prometheus.scrape "dockermetrics" {
  scrape_interval = "15s"
  targets         = prometheus.exporter.cadvisor.dockermetrics.targets
  forward_to      = [
    prometheus.relabel.cadvisor_labels.receiver,
    prometheus.remote_write.echo.receiver,
  ]
}